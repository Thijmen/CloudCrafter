/* eslint-disable */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * CloudCrafter.Web
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { axiosInstance } from "../../utils/axios-instance";
export interface PostLoginUserQuery {
  email?: string;
  password?: string;
}

export interface TokenDto {
  token?: string;
  validTo?: string;
}

export interface UpdateContributorRequest {
  id: number;
  /**
   * @minLength 2
   * @maxLength 100
   */
  name: string;
}

export interface GetContributorByIdRequest {
  [key: string]: unknown;
}

export interface ContributorRecord {
  id?: number;
  name?: string;
  /** @nullable */
  phoneNumber?: string | null;
}

export interface UpdateContributorResponse {
  contributor?: ContributorRecord;
}

export interface ContributorListResponse {
  contributors?: ContributorRecord[];
}

export interface DeleteContributorRequest {
  [key: string]: unknown;
}

export interface CreateContributorRequest {
  /**
   * @minLength 2
   * @maxLength 100
   */
  name: string;
  /** @nullable */
  phoneNumber?: string | null;
}

/**
 * the collection of errors for the current context
 */
export type ErrorResponseErrors = { [key: string]: string[] };

/**
 * the dto used to send an error response to the client
 */
export interface ErrorResponse {
  /** the collection of errors for the current context */
  errors?: ErrorResponseErrors;
  /** the message for the error response */
  message?: string;
  /** the http status code sent to the client. default is 400. */
  statusCode?: number;
}

export interface CreateContributorResponse {
  id?: number;
  name?: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Creates a new Contributor given a name.
 * @summary Create a new Contributor
 */
export const cloudCrafterWebContributorsCreate = (
  createContributorRequest: CreateContributorRequest,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<CreateContributorResponse>(
    {
      url: `/Contributors`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createContributorRequest,
    },
    options,
  );
};

export const getCloudCrafterWebContributorsCreateMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsCreate>>,
    TError,
    { data: CreateContributorRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsCreate>>,
  TError,
  { data: CreateContributorRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsCreate>>,
    { data: CreateContributorRequest }
  > = (props) => {
    const { data } = props ?? {};

    return cloudCrafterWebContributorsCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CloudCrafterWebContributorsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsCreate>>
>;
export type CloudCrafterWebContributorsCreateMutationBody =
  CreateContributorRequest;
export type CloudCrafterWebContributorsCreateMutationError = ErrorResponse;

/**
 * @summary Create a new Contributor
 */
export const useCloudCrafterWebContributorsCreate = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsCreate>>,
    TError,
    { data: CreateContributorRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsCreate>>,
  TError,
  { data: CreateContributorRequest },
  TContext
> => {
  const mutationOptions =
    getCloudCrafterWebContributorsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * List all contributors - returns a ContributorListResponse containing the Contributors.
 * @summary List all Contributors
 */
export const cloudCrafterWebContributorsList = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ContributorListResponse>(
    { url: `/Contributors`, method: "GET", signal },
    options,
  );
};

export const getCloudCrafterWebContributorsListQueryKey = () => {
  return [`/Contributors`] as const;
};

export const getCloudCrafterWebContributorsListQueryOptions = <
  TData = Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCloudCrafterWebContributorsListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>
  > = ({ signal }) => cloudCrafterWebContributorsList(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CloudCrafterWebContributorsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>
>;
export type CloudCrafterWebContributorsListQueryError = unknown;

/**
 * @summary List all Contributors
 */
export const useCloudCrafterWebContributorsList = <
  TData = Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCloudCrafterWebContributorsListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getCloudCrafterWebContributorsListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCloudCrafterWebContributorsListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>
  > = ({ signal }) => cloudCrafterWebContributorsList(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CloudCrafterWebContributorsListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>
>;
export type CloudCrafterWebContributorsListSuspenseQueryError = unknown;

/**
 * @summary List all Contributors
 */
export const useCloudCrafterWebContributorsListSuspense = <
  TData = Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof cloudCrafterWebContributorsList>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getCloudCrafterWebContributorsListSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Delete a Contributor by providing a valid integer id.
 * @summary Delete a Contributor.
 */
export const cloudCrafterWebContributorsDelete = (
  contributorId: number,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<unknown>(
    { url: `/Contributors/${contributorId}`, method: "DELETE" },
    options,
  );
};

export const getCloudCrafterWebContributorsDeleteMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsDelete>>,
    TError,
    { contributorId: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsDelete>>,
  TError,
  { contributorId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsDelete>>,
    { contributorId: number }
  > = (props) => {
    const { contributorId } = props ?? {};

    return cloudCrafterWebContributorsDelete(contributorId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CloudCrafterWebContributorsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsDelete>>
>;

export type CloudCrafterWebContributorsDeleteMutationError = ErrorResponse;

/**
 * @summary Delete a Contributor.
 */
export const useCloudCrafterWebContributorsDelete = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsDelete>>,
    TError,
    { contributorId: number },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsDelete>>,
  TError,
  { contributorId: number },
  TContext
> => {
  const mutationOptions =
    getCloudCrafterWebContributorsDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Takes a positive integer ID and returns a matching Contributor record.
 * @summary Get a Contributor by integer ID.
 */
export const cloudCrafterWebContributorsGetById = (
  contributorId: number,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<ContributorRecord>(
    { url: `/Contributors/${contributorId}`, method: "GET", signal },
    options,
  );
};

export const getCloudCrafterWebContributorsGetByIdQueryKey = (
  contributorId: number,
) => {
  return [`/Contributors/${contributorId}`] as const;
};

export const getCloudCrafterWebContributorsGetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>,
  TError = ErrorResponse,
>(
  contributorId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCloudCrafterWebContributorsGetByIdQueryKey(contributorId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>
  > = ({ signal }) =>
    cloudCrafterWebContributorsGetById(contributorId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!contributorId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CloudCrafterWebContributorsGetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>
>;
export type CloudCrafterWebContributorsGetByIdQueryError = ErrorResponse;

/**
 * @summary Get a Contributor by integer ID.
 */
export const useCloudCrafterWebContributorsGetById = <
  TData = Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>,
  TError = ErrorResponse,
>(
  contributorId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCloudCrafterWebContributorsGetByIdQueryOptions(
    contributorId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getCloudCrafterWebContributorsGetByIdSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>,
  TError = ErrorResponse,
>(
  contributorId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCloudCrafterWebContributorsGetByIdQueryKey(contributorId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>
  > = ({ signal }) =>
    cloudCrafterWebContributorsGetById(contributorId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!contributorId,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CloudCrafterWebContributorsGetByIdSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>
>;
export type CloudCrafterWebContributorsGetByIdSuspenseQueryError =
  ErrorResponse;

/**
 * @summary Get a Contributor by integer ID.
 */
export const useCloudCrafterWebContributorsGetByIdSuspense = <
  TData = Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>,
  TError = ErrorResponse,
>(
  contributorId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof cloudCrafterWebContributorsGetById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getCloudCrafterWebContributorsGetByIdSuspenseQueryOptions(
      contributorId,
      options,
    );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update an existing Contributor by providing a fully defined replacement set of values.
See: https://stackoverflow.com/questions/60761955/rest-update-best-practice-put-collection-id-without-id-in-body-vs-put-collecti
 * @summary Update an existing Contributor.
 */
export const cloudCrafterWebContributorsUpdate = (
  contributorId: number,
  updateContributorRequest: UpdateContributorRequest,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<UpdateContributorResponse>(
    {
      url: `/Contributors/${contributorId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateContributorRequest,
    },
    options,
  );
};

export const getCloudCrafterWebContributorsUpdateMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsUpdate>>,
    TError,
    { contributorId: number; data: UpdateContributorRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsUpdate>>,
  TError,
  { contributorId: number; data: UpdateContributorRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsUpdate>>,
    { contributorId: number; data: UpdateContributorRequest }
  > = (props) => {
    const { contributorId, data } = props ?? {};

    return cloudCrafterWebContributorsUpdate(
      contributorId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CloudCrafterWebContributorsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsUpdate>>
>;
export type CloudCrafterWebContributorsUpdateMutationBody =
  UpdateContributorRequest;
export type CloudCrafterWebContributorsUpdateMutationError = ErrorResponse;

/**
 * @summary Update an existing Contributor.
 */
export const useCloudCrafterWebContributorsUpdate = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cloudCrafterWebContributorsUpdate>>,
    TError,
    { contributorId: number; data: UpdateContributorRequest },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof cloudCrafterWebContributorsUpdate>>,
  TError,
  { contributorId: number; data: UpdateContributorRequest },
  TContext
> => {
  const mutationOptions =
    getCloudCrafterWebContributorsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postLoginUser = (
  postLoginUserQuery: PostLoginUserQuery,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<TokenDto>(
    {
      url: `/api/Auth`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postLoginUserQuery,
    },
    options,
  );
};

export const getPostLoginUserMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLoginUser>>,
    TError,
    { data: PostLoginUserQuery },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLoginUser>>,
  TError,
  { data: PostLoginUserQuery },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLoginUser>>,
    { data: PostLoginUserQuery }
  > = (props) => {
    const { data } = props ?? {};

    return postLoginUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoginUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLoginUser>>
>;
export type PostLoginUserMutationBody = PostLoginUserQuery;
export type PostLoginUserMutationError = unknown;

export const usePostLoginUser = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLoginUser>>,
    TError,
    { data: PostLoginUserQuery },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postLoginUser>>,
  TError,
  { data: PostLoginUserQuery },
  TContext
> => {
  const mutationOptions = getPostLoginUserMutationOptions(options);

  return useMutation(mutationOptions);
};
